
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007e8  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000817  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023a4  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b8  00000000  00000000  00002cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd6  00000000  00000000  00003697  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  00004470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  000046a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001076  00000000  00000000  00004a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00005b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000746  00000746  000007da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.HLCD_Void_WirteCommand 0000008e  00000538  00000538  000005cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.HLCD_Void_Init 00000084  00000654  00000654  000006e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.HLCD_Void_WriteChar 0000008e  000005c6  000005c6  0000065a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.HLCD_Void_WrireString 00000026  000006d8  000006d8  0000076c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.HLCD_Void_ClearLCD 00000008  0000072e  0000072e  000007c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000016  0000006c  0000006c  00000100  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.main    000000a0  00000498  00000498  0000052c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.MDIO_setPinDirection 00000136  00000236  00000236  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.MDIO_setPinValue 0000012c  0000036c  0000036c  00000400  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.MUART_init 000001a8  0000008e  0000008e  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.MUART_sendByte 00000008  00000736  00000736  000007ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.MUART_receiveByte 00000008  0000073e  0000073e  000007d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .progmemx.data.st_g_USARTconf 0000000b  00000082  00000082  00000116  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 27 .text.libgcc  0000001a  000006fe  000006fe  00000792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  0000074e  0000074e  000007e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  00000750  00000750  000007e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  00000752  00000752  000007e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  00000718  00000718  000007ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  0000074a  0000074a  000007de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
   8:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
   c:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  10:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  14:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  18:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  1c:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  20:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  24:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  28:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  2c:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  30:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  34:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  38:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  3c:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  40:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  44:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  48:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  4c:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>
  50:	0c 94 a3 03 	jmp	0x746	; 0x746 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4c 02 	call	0x498	; 0x498 <main>
  64:	0c 94 8c 03 	jmp	0x718	; 0x718 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000746 <__bad_interrupt>:
 746:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.HLCD_Void_WirteCommand:

00000538 <HLCD_Void_WirteCommand>:
 538:	cf 93       	push	r28
 53a:	c8 2f       	mov	r28, r24
 53c:	40 e0       	ldi	r20, 0x00	; 0
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	62 e0       	ldi	r22, 0x02	; 2
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	63 e0       	ldi	r22, 0x03	; 3
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 55a:	8b b3       	in	r24, 0x1b	; 27
 55c:	9c 2f       	mov	r25, r28
 55e:	90 7f       	andi	r25, 0xF0	; 240
 560:	8f 70       	andi	r24, 0x0F	; 15
 562:	89 2b       	or	r24, r25
 564:	8b bb       	out	0x1b, r24	; 27
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 570:	8f e9       	ldi	r24, 0x9F	; 159
 572:	9f e0       	ldi	r25, 0x0F	; 15
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <HLCD_Void_WirteCommand+0x3c>
 578:	00 c0       	rjmp	.+0      	; 0x57a <HLCD_Void_WirteCommand+0x42>
 57a:	00 00       	nop
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	63 e0       	ldi	r22, 0x03	; 3
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 586:	20 e1       	ldi	r18, 0x10	; 16
 588:	c2 9f       	mul	r28, r18
 58a:	c0 01       	movw	r24, r0
 58c:	11 24       	eor	r1, r1
 58e:	9b b3       	in	r25, 0x1b	; 27
 590:	9f 70       	andi	r25, 0x0F	; 15
 592:	89 2b       	or	r24, r25
 594:	8b bb       	out	0x1b, r24	; 27
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	63 e0       	ldi	r22, 0x03	; 3
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 5a0:	8f e9       	ldi	r24, 0x9F	; 159
 5a2:	9f e0       	ldi	r25, 0x0F	; 15
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <HLCD_Void_WirteCommand+0x6c>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <HLCD_Void_WirteCommand+0x72>
 5aa:	00 00       	nop
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	63 e0       	ldi	r22, 0x03	; 3
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 5b6:	8f e1       	ldi	r24, 0x1F	; 31
 5b8:	9e e4       	ldi	r25, 0x4E	; 78
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <HLCD_Void_WirteCommand+0x82>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <HLCD_Void_WirteCommand+0x88>
 5c0:	00 00       	nop
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

Disassembly of section .text.HLCD_Void_Init:

00000654 <HLCD_Void_Init>:
 654:	41 e0       	ldi	r20, 0x01	; 1
 656:	61 e0       	ldi	r22, 0x01	; 1
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	0e 94 1b 01 	call	0x236	; 0x236 <MDIO_setPinDirection>
 65e:	41 e0       	ldi	r20, 0x01	; 1
 660:	62 e0       	ldi	r22, 0x02	; 2
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	0e 94 1b 01 	call	0x236	; 0x236 <MDIO_setPinDirection>
 668:	41 e0       	ldi	r20, 0x01	; 1
 66a:	63 e0       	ldi	r22, 0x03	; 3
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	0e 94 1b 01 	call	0x236	; 0x236 <MDIO_setPinDirection>
 672:	41 e0       	ldi	r20, 0x01	; 1
 674:	64 e0       	ldi	r22, 0x04	; 4
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	0e 94 1b 01 	call	0x236	; 0x236 <MDIO_setPinDirection>
 67c:	41 e0       	ldi	r20, 0x01	; 1
 67e:	65 e0       	ldi	r22, 0x05	; 5
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	0e 94 1b 01 	call	0x236	; 0x236 <MDIO_setPinDirection>
 686:	41 e0       	ldi	r20, 0x01	; 1
 688:	66 e0       	ldi	r22, 0x06	; 6
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	0e 94 1b 01 	call	0x236	; 0x236 <MDIO_setPinDirection>
 690:	41 e0       	ldi	r20, 0x01	; 1
 692:	67 e0       	ldi	r22, 0x07	; 7
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	0e 94 1b 01 	call	0x236	; 0x236 <MDIO_setPinDirection>
 69a:	2f ef       	ldi	r18, 0xFF	; 255
 69c:	81 ee       	ldi	r24, 0xE1	; 225
 69e:	94 e0       	ldi	r25, 0x04	; 4
 6a0:	21 50       	subi	r18, 0x01	; 1
 6a2:	80 40       	sbci	r24, 0x00	; 0
 6a4:	90 40       	sbci	r25, 0x00	; 0
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <HLCD_Void_Init+0x4c>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <HLCD_Void_Init+0x56>
 6aa:	00 00       	nop
 6ac:	83 e3       	ldi	r24, 0x33	; 51
 6ae:	0e 94 9c 02 	call	0x538	; 0x538 <HLCD_Void_WirteCommand>
 6b2:	82 e3       	ldi	r24, 0x32	; 50
 6b4:	0e 94 9c 02 	call	0x538	; 0x538 <HLCD_Void_WirteCommand>
 6b8:	88 e2       	ldi	r24, 0x28	; 40
 6ba:	0e 94 9c 02 	call	0x538	; 0x538 <HLCD_Void_WirteCommand>
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	0e 94 9c 02 	call	0x538	; 0x538 <HLCD_Void_WirteCommand>
 6c4:	8c e0       	ldi	r24, 0x0C	; 12
 6c6:	0e 94 9c 02 	call	0x538	; 0x538 <HLCD_Void_WirteCommand>
 6ca:	86 e0       	ldi	r24, 0x06	; 6
 6cc:	0e 94 9c 02 	call	0x538	; 0x538 <HLCD_Void_WirteCommand>
 6d0:	82 e0       	ldi	r24, 0x02	; 2
 6d2:	0e 94 9c 02 	call	0x538	; 0x538 <HLCD_Void_WirteCommand>
 6d6:	08 95       	ret

Disassembly of section .text.HLCD_Void_WriteChar:

000005c6 <HLCD_Void_WriteChar>:
 5c6:	cf 93       	push	r28
 5c8:	c8 2f       	mov	r28, r24
 5ca:	41 e0       	ldi	r20, 0x01	; 1
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	62 e0       	ldi	r22, 0x02	; 2
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	63 e0       	ldi	r22, 0x03	; 3
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 5e8:	8b b3       	in	r24, 0x1b	; 27
 5ea:	9c 2f       	mov	r25, r28
 5ec:	90 7f       	andi	r25, 0xF0	; 240
 5ee:	8f 70       	andi	r24, 0x0F	; 15
 5f0:	89 2b       	or	r24, r25
 5f2:	8b bb       	out	0x1b, r24	; 27
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	63 e0       	ldi	r22, 0x03	; 3
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 5fe:	8f e9       	ldi	r24, 0x9F	; 159
 600:	9f e0       	ldi	r25, 0x0F	; 15
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <HLCD_Void_WriteChar+0x3c>
 606:	00 c0       	rjmp	.+0      	; 0x608 <HLCD_Void_WriteChar+0x42>
 608:	00 00       	nop
 60a:	40 e0       	ldi	r20, 0x00	; 0
 60c:	63 e0       	ldi	r22, 0x03	; 3
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 614:	20 e1       	ldi	r18, 0x10	; 16
 616:	c2 9f       	mul	r28, r18
 618:	c0 01       	movw	r24, r0
 61a:	11 24       	eor	r1, r1
 61c:	9b b3       	in	r25, 0x1b	; 27
 61e:	9f 70       	andi	r25, 0x0F	; 15
 620:	89 2b       	or	r24, r25
 622:	8b bb       	out	0x1b, r24	; 27
 624:	41 e0       	ldi	r20, 0x01	; 1
 626:	63 e0       	ldi	r22, 0x03	; 3
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 62e:	8f e9       	ldi	r24, 0x9F	; 159
 630:	9f e0       	ldi	r25, 0x0F	; 15
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	f1 f7       	brne	.-4      	; 0x632 <HLCD_Void_WriteChar+0x6c>
 636:	00 c0       	rjmp	.+0      	; 0x638 <HLCD_Void_WriteChar+0x72>
 638:	00 00       	nop
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	63 e0       	ldi	r22, 0x03	; 3
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
 644:	8f e1       	ldi	r24, 0x1F	; 31
 646:	9e e4       	ldi	r25, 0x4E	; 78
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <HLCD_Void_WriteChar+0x82>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <HLCD_Void_WriteChar+0x88>
 64e:	00 00       	nop
 650:	cf 91       	pop	r28
 652:	08 95       	ret

Disassembly of section .text.HLCD_Void_WrireString:

000006d8 <HLCD_Void_WrireString>:
 6d8:	0f 93       	push	r16
 6da:	1f 93       	push	r17
 6dc:	cf 93       	push	r28
 6de:	8c 01       	movw	r16, r24
 6e0:	c0 e0       	ldi	r28, 0x00	; 0
 6e2:	03 c0       	rjmp	.+6      	; 0x6ea <HLCD_Void_WrireString+0x12>
 6e4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <HLCD_Void_WriteChar>
 6e8:	cf 5f       	subi	r28, 0xFF	; 255
 6ea:	f8 01       	movw	r30, r16
 6ec:	ec 0f       	add	r30, r28
 6ee:	f1 1d       	adc	r31, r1
 6f0:	80 81       	ld	r24, Z
 6f2:	81 11       	cpse	r24, r1
 6f4:	f7 cf       	rjmp	.-18     	; 0x6e4 <HLCD_Void_WrireString+0xc>
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	08 95       	ret

Disassembly of section .text.HLCD_Void_ClearLCD:

0000072e <HLCD_Void_ClearLCD>:
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	0e 94 9c 02 	call	0x538	; 0x538 <HLCD_Void_WirteCommand>
 734:	08 95       	ret

Disassembly of section .text.main:

00000498 <main>:
#include "hal/HLCD_init.h"
#include <util/delay.h>

extern const ST_USART_CONFIG st_g_USARTconf;
int main(void)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
 4a0:	66 97       	sbiw	r28, 0x16	; 22
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
	HLCD_Void_Init();
 4ac:	0e 94 2a 03 	call	0x654	; 0x654 <HLCD_Void_Init>
	MDIO_setPinDirection(PORTC , PIN7 ,PIN_OUT);
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	67 e0       	ldi	r22, 0x07	; 7
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	0e 94 1b 01 	call	0x236	; 0x236 <MDIO_setPinDirection>
	MUART_init(&st_g_USARTconf);
 4ba:	62 e8       	ldi	r22, 0x82	; 130
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 47 00 	call	0x8e	; 0x8e <MUART_init>
    while(1)
    {
		u8 arr[]="UART Done Link Config";
 4c4:	2c e6       	ldi	r18, 0x6C	; 108
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	86 e1       	ldi	r24, 0x16	; 22
 4cc:	f9 01       	movw	r30, r18
 4ce:	de 01       	movw	r26, r28
 4d0:	11 96       	adiw	r26, 0x01	; 1
 4d2:	74 2f       	mov	r23, r20
 4d4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__movmemx_qi>
		u8 u8_receiveddata = 0;
		u8_receiveddata = MUART_receiveByte();
 4d8:	0e 94 9f 03 	call	0x73e	; 0x73e <MUART_receiveByte>
 4dc:	18 2f       	mov	r17, r24
		if (u8_receiveddata == 'a')
 4de:	81 36       	cpi	r24, 0x61	; 97
 4e0:	39 f5       	brne	.+78     	; 0x530 <main+0x98>
		{
			MDIO_setPinValue(PORTC , PIN7 , PIN_HIGH);
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	67 e0       	ldi	r22, 0x07	; 7
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
			HLCD_Void_WriteChar(u8_receiveddata);
 4ec:	81 2f       	mov	r24, r17
 4ee:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <HLCD_Void_WriteChar>
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	84 e3       	ldi	r24, 0x34	; 52
 4f6:	9c e0       	ldi	r25, 0x0C	; 12
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0x60>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x6a>
 502:	00 00       	nop
			_delay_ms(4000);
			HLCD_Void_ClearLCD();
 504:	0e 94 97 03 	call	0x72e	; 0x72e <HLCD_Void_ClearLCD>
		
			HLCD_Void_WrireString(arr);
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <HLCD_Void_WrireString>
 510:	2f ef       	ldi	r18, 0xFF	; 255
 512:	84 e3       	ldi	r24, 0x34	; 52
 514:	9c e0       	ldi	r25, 0x0C	; 12
 516:	21 50       	subi	r18, 0x01	; 1
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	90 40       	sbci	r25, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <main+0x7e>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <main+0x88>
 520:	00 00       	nop
			_delay_ms(4000);
			HLCD_Void_ClearLCD();
 522:	0e 94 97 03 	call	0x72e	; 0x72e <HLCD_Void_ClearLCD>
			MDIO_setPinValue(PORTC , PIN7 , PIN_LOW);
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	67 e0       	ldi	r22, 0x07	; 7
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	0e 94 b6 01 	call	0x36c	; 0x36c <MDIO_setPinValue>
		}
		
		MUART_sendByte(u8_receiveddata);
 530:	81 2f       	mov	r24, r17
 532:	0e 94 9b 03 	call	0x736	; 0x736 <MUART_sendByte>
        //TODO:: Please write your application code 
    }
 536:	c6 cf       	rjmp	.-116    	; 0x4c4 <main+0x2c>

Disassembly of section .text.MDIO_setPinDirection:

00000236 <MDIO_setPinDirection>:
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	08 f0       	brcs	.+2      	; 0x23c <MDIO_setPinDirection+0x6>
 23a:	88 c0       	rjmp	.+272    	; 0x34c <MDIO_setPinDirection+0x116>
 23c:	68 30       	cpi	r22, 0x08	; 8
 23e:	08 f0       	brcs	.+2      	; 0x242 <MDIO_setPinDirection+0xc>
 240:	87 c0       	rjmp	.+270    	; 0x350 <MDIO_setPinDirection+0x11a>
 242:	42 30       	cpi	r20, 0x02	; 2
 244:	08 f0       	brcs	.+2      	; 0x248 <MDIO_setPinDirection+0x12>
 246:	86 c0       	rjmp	.+268    	; 0x354 <MDIO_setPinDirection+0x11e>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	31 f1       	breq	.+76     	; 0x298 <MDIO_setPinDirection+0x62>
 24c:	38 f0       	brcs	.+14     	; 0x25c <MDIO_setPinDirection+0x26>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	09 f4       	brne	.+2      	; 0x254 <MDIO_setPinDirection+0x1e>
 252:	40 c0       	rjmp	.+128    	; 0x2d4 <MDIO_setPinDirection+0x9e>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	09 f4       	brne	.+2      	; 0x25a <MDIO_setPinDirection+0x24>
 258:	5b c0       	rjmp	.+182    	; 0x310 <MDIO_setPinDirection+0xda>
 25a:	7e c0       	rjmp	.+252    	; 0x358 <MDIO_setPinDirection+0x122>
 25c:	44 23       	and	r20, r20
 25e:	19 f0       	breq	.+6      	; 0x266 <MDIO_setPinDirection+0x30>
 260:	41 30       	cpi	r20, 0x01	; 1
 262:	71 f0       	breq	.+28     	; 0x280 <MDIO_setPinDirection+0x4a>
 264:	7b c0       	rjmp	.+246    	; 0x35c <MDIO_setPinDirection+0x126>
 266:	2a b3       	in	r18, 0x1a	; 26
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <MDIO_setPinDirection+0x3c>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <MDIO_setPinDirection+0x38>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	8a bb       	out	0x1a, r24	; 26
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	08 95       	ret
 280:	2a b3       	in	r18, 0x1a	; 26
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <MDIO_setPinDirection+0x56>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <MDIO_setPinDirection+0x52>
 290:	82 2b       	or	r24, r18
 292:	8a bb       	out	0x1a, r24	; 26
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
 298:	44 23       	and	r20, r20
 29a:	19 f0       	breq	.+6      	; 0x2a2 <MDIO_setPinDirection+0x6c>
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	71 f0       	breq	.+28     	; 0x2bc <MDIO_setPinDirection+0x86>
 2a0:	5f c0       	rjmp	.+190    	; 0x360 <MDIO_setPinDirection+0x12a>
 2a2:	27 b3       	in	r18, 0x17	; 23
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <MDIO_setPinDirection+0x78>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <MDIO_setPinDirection+0x74>
 2b2:	80 95       	com	r24
 2b4:	82 23       	and	r24, r18
 2b6:	87 bb       	out	0x17, r24	; 23
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret
 2bc:	27 b3       	in	r18, 0x17	; 23
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <MDIO_setPinDirection+0x92>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <MDIO_setPinDirection+0x8e>
 2cc:	82 2b       	or	r24, r18
 2ce:	87 bb       	out	0x17, r24	; 23
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
 2d4:	44 23       	and	r20, r20
 2d6:	19 f0       	breq	.+6      	; 0x2de <MDIO_setPinDirection+0xa8>
 2d8:	41 30       	cpi	r20, 0x01	; 1
 2da:	71 f0       	breq	.+28     	; 0x2f8 <MDIO_setPinDirection+0xc2>
 2dc:	43 c0       	rjmp	.+134    	; 0x364 <MDIO_setPinDirection+0x12e>
 2de:	24 b3       	in	r18, 0x14	; 20
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <MDIO_setPinDirection+0xb4>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <MDIO_setPinDirection+0xb0>
 2ee:	80 95       	com	r24
 2f0:	82 23       	and	r24, r18
 2f2:	84 bb       	out	0x14, r24	; 20
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	08 95       	ret
 2f8:	24 b3       	in	r18, 0x14	; 20
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <MDIO_setPinDirection+0xce>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <MDIO_setPinDirection+0xca>
 308:	82 2b       	or	r24, r18
 30a:	84 bb       	out	0x14, r24	; 20
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
 310:	44 23       	and	r20, r20
 312:	19 f0       	breq	.+6      	; 0x31a <MDIO_setPinDirection+0xe4>
 314:	41 30       	cpi	r20, 0x01	; 1
 316:	71 f0       	breq	.+28     	; 0x334 <MDIO_setPinDirection+0xfe>
 318:	27 c0       	rjmp	.+78     	; 0x368 <MDIO_setPinDirection+0x132>
 31a:	21 b3       	in	r18, 0x11	; 17
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <MDIO_setPinDirection+0xf0>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <MDIO_setPinDirection+0xec>
 32a:	80 95       	com	r24
 32c:	82 23       	and	r24, r18
 32e:	81 bb       	out	0x11, r24	; 17
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
 334:	21 b3       	in	r18, 0x11	; 17
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <MDIO_setPinDirection+0x10a>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <MDIO_setPinDirection+0x106>
 344:	82 2b       	or	r24, r18
 346:	81 bb       	out	0x11, r24	; 17
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	08 95       	ret
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	08 95       	ret
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	08 95       	ret
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 95       	ret
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	08 95       	ret
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	08 95       	ret
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	08 95       	ret
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	08 95       	ret

Disassembly of section .text.MDIO_setPinValue:

0000036c <MDIO_setPinValue>:
 36c:	84 30       	cpi	r24, 0x04	; 4
 36e:	08 f0       	brcs	.+2      	; 0x372 <MDIO_setPinValue+0x6>
 370:	85 c0       	rjmp	.+266    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 372:	68 30       	cpi	r22, 0x08	; 8
 374:	08 f0       	brcs	.+2      	; 0x378 <MDIO_setPinValue+0xc>
 376:	84 c0       	rjmp	.+264    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	31 f1       	breq	.+76     	; 0x3c8 <MDIO_setPinValue+0x5c>
 37c:	38 f0       	brcs	.+14     	; 0x38c <MDIO_setPinValue+0x20>
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	09 f4       	brne	.+2      	; 0x384 <MDIO_setPinValue+0x18>
 382:	40 c0       	rjmp	.+128    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	09 f4       	brne	.+2      	; 0x38a <MDIO_setPinValue+0x1e>
 388:	5b c0       	rjmp	.+182    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 38a:	7c c0       	rjmp	.+248    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 38c:	44 23       	and	r20, r20
 38e:	19 f0       	breq	.+6      	; 0x396 <MDIO_setPinValue+0x2a>
 390:	41 30       	cpi	r20, 0x01	; 1
 392:	71 f0       	breq	.+28     	; 0x3b0 <MDIO_setPinValue+0x44>
 394:	79 c0       	rjmp	.+242    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 396:	2b b3       	in	r18, 0x1b	; 27
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <MDIO_setPinValue+0x36>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <MDIO_setPinValue+0x32>
 3a6:	80 95       	com	r24
 3a8:	82 23       	and	r24, r18
 3aa:	8b bb       	out	0x1b, r24	; 27
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret
 3b0:	2b b3       	in	r18, 0x1b	; 27
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <MDIO_setPinValue+0x50>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <MDIO_setPinValue+0x4c>
 3c0:	82 2b       	or	r24, r18
 3c2:	8b bb       	out	0x1b, r24	; 27
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	08 95       	ret
 3c8:	44 23       	and	r20, r20
 3ca:	19 f0       	breq	.+6      	; 0x3d2 <MDIO_setPinValue+0x66>
 3cc:	41 30       	cpi	r20, 0x01	; 1
 3ce:	71 f0       	breq	.+28     	; 0x3ec <MDIO_setPinValue+0x80>
 3d0:	5d c0       	rjmp	.+186    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 3d2:	28 b3       	in	r18, 0x18	; 24
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <MDIO_setPinValue+0x72>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <MDIO_setPinValue+0x6e>
 3e2:	80 95       	com	r24
 3e4:	82 23       	and	r24, r18
 3e6:	88 bb       	out	0x18, r24	; 24
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
 3ec:	28 b3       	in	r18, 0x18	; 24
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <MDIO_setPinValue+0x8c>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <MDIO_setPinValue+0x88>
 3fc:	82 2b       	or	r24, r18
 3fe:	88 bb       	out	0x18, r24	; 24
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	08 95       	ret
 404:	44 23       	and	r20, r20
 406:	19 f0       	breq	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 408:	41 30       	cpi	r20, 0x01	; 1
 40a:	71 f0       	breq	.+28     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 40c:	41 c0       	rjmp	.+130    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 40e:	25 b3       	in	r18, 0x15	; 21
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	80 95       	com	r24
 420:	82 23       	and	r24, r18
 422:	85 bb       	out	0x15, r24	; 21
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 95       	ret
 428:	25 b3       	in	r18, 0x15	; 21
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	82 2b       	or	r24, r18
 43a:	85 bb       	out	0x15, r24	; 21
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
 440:	44 23       	and	r20, r20
 442:	19 f0       	breq	.+6      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 444:	41 30       	cpi	r20, 0x01	; 1
 446:	71 f0       	breq	.+28     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 448:	25 c0       	rjmp	.+74     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 44a:	22 b3       	in	r18, 0x12	; 18
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	80 95       	com	r24
 45c:	82 23       	and	r24, r18
 45e:	82 bb       	out	0x12, r24	; 18
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	08 95       	ret
 464:	22 b3       	in	r18, 0x12	; 18
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	6a 95       	dec	r22
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	82 2b       	or	r24, r18
 476:	82 bb       	out	0x12, r24	; 18
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	08 95       	ret
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	08 95       	ret
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	08 95       	ret
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	08 95       	ret
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	08 95       	ret
 48c:	84 e0       	ldi	r24, 0x04	; 4
 48e:	08 95       	ret
 490:	84 e0       	ldi	r24, 0x04	; 4
 492:	08 95       	ret
 494:	84 e0       	ldi	r24, 0x04	; 4
 496:	08 95       	ret

Disassembly of section .text.MUART_init:

0000008e <MUART_init>:




void MUART_init(const ST_USART_CONFIG *config)
{
  8e:	cf 92       	push	r12
  90:	df 92       	push	r13
  92:	ef 92       	push	r14
  94:	a8 2f       	mov	r26, r24
  96:	cb 01       	movw	r24, r22
	u16 UBRR_val;       //to set the value in UBRRL register
	//To Calculate the value in UBRRL & UBBRH registers
		switch(config->SYNC_MODE)
  98:	fc 01       	movw	r30, r24
  9a:	24 91       	lpm	r18, Z
  9c:	a7 fd       	sbrc	r26, 7
  9e:	20 81       	ld	r18, Z
  a0:	22 23       	and	r18, r18
  a2:	19 f0       	breq	.+6      	; 0xaa <MUART_init+0x1c>
  a4:	21 30       	cpi	r18, 0x01	; 1
  a6:	81 f0       	breq	.+32     	; 0xc8 <MUART_init+0x3a>
  a8:	17 c0       	rjmp	.+46     	; 0xd8 <MUART_init+0x4a>
		{
			case USART_ASYNC_MODE:
			{
				if(config->SPEED_MODE == USART_NORMAL_SPEED)
  aa:	6c 01       	movw	r12, r24
  ac:	ea 2e       	mov	r14, r26
  ae:	27 e0       	ldi	r18, 0x07	; 7
  b0:	c2 0e       	add	r12, r18
  b2:	d1 1c       	adc	r13, r1
  b4:	e1 1c       	adc	r14, r1
  b6:	f6 01       	movw	r30, r12
  b8:	24 91       	lpm	r18, Z
  ba:	e7 fc       	sbrc	r14, 7
  bc:	20 81       	ld	r18, Z
  be:	22 23       	and	r18, r18
  c0:	31 f0       	breq	.+12     	; 0xce <MUART_init+0x40>
				{
					UBRR_val= ASYNC_NORMAL_EQU;
				}
				else if( config->SPEED_MODE ==  USART_DOUBLE_SPEED )
  c2:	21 30       	cpi	r18, 0x01	; 1
  c4:	49 f4       	brne	.+18     	; 0xd8 <MUART_init+0x4a>
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <MUART_init+0x46>
				}
				break;
			}
			case USART_SYNC_MODE:
			{
				UBRR_val = SYNC_EQU;
  c8:	4f e9       	ldi	r20, 0x9F	; 159
  ca:	51 e0       	ldi	r21, 0x01	; 1
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <MUART_init+0x4a>
		{
			case USART_ASYNC_MODE:
			{
				if(config->SPEED_MODE == USART_NORMAL_SPEED)
				{
					UBRR_val= ASYNC_NORMAL_EQU;
  ce:	42 e6       	ldi	r20, 0x62	; 98
  d0:	51 e0       	ldi	r21, 0x01	; 1
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <MUART_init+0x4a>
				}
				else if( config->SPEED_MODE ==  USART_DOUBLE_SPEED )
				{
					UBRR_val = ASYNC_DOUBLE_EQU;
  d4:	4f ec       	ldi	r20, 0xCF	; 207
  d6:	50 e0       	ldi	r21, 0x00	; 0
				UBRR_val = SYNC_EQU;
				break;
			}
		}
		
	UBRRL=(u8)(UBRR_val>>8);
  d8:	59 b9       	out	0x09, r21	; 9
	UBRRH=(u8)(UBRR_val);
  da:	40 bd       	out	0x20, r20	; 32
	
	/*Set speed mode*/
	switch(config->SPEED_MODE)
  dc:	9c 01       	movw	r18, r24
  de:	4a 2f       	mov	r20, r26
  e0:	29 5f       	subi	r18, 0xF9	; 249
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	4f 4f       	sbci	r20, 0xFF	; 255
  e6:	f9 01       	movw	r30, r18
  e8:	24 91       	lpm	r18, Z
  ea:	47 fd       	sbrc	r20, 7
  ec:	20 81       	ld	r18, Z
  ee:	22 23       	and	r18, r18
  f0:	19 f0       	breq	.+6      	; 0xf8 <MUART_init+0x6a>
  f2:	21 30       	cpi	r18, 0x01	; 1
  f4:	29 f0       	breq	.+10     	; 0x100 <MUART_init+0x72>
  f6:	07 c0       	rjmp	.+14     	; 0x106 <MUART_init+0x78>
	{
		case USART_NORMAL_SPEED:
		  CLEAR_BIT(UCSRA,U2X);
  f8:	2b b1       	in	r18, 0x0b	; 11
  fa:	2d 7f       	andi	r18, 0xFD	; 253
  fc:	2b b9       	out	0x0b, r18	; 11
		  break;
  fe:	03 c0       	rjmp	.+6      	; 0x106 <MUART_init+0x78>
	
		case USART_DOUBLE_SPEED:
		 SET_BIT(UCSRA,U2X);
 100:	2b b1       	in	r18, 0x0b	; 11
 102:	22 60       	ori	r18, 0x02	; 2
 104:	2b b9       	out	0x0b, r18	; 11
		 break;
	}
	/*Set synchronization mode*/
	switch(config->SYNC_MODE)
 106:	fc 01       	movw	r30, r24
 108:	24 91       	lpm	r18, Z
 10a:	a7 fd       	sbrc	r26, 7
 10c:	20 81       	ld	r18, Z
 10e:	22 23       	and	r18, r18
 110:	31 f0       	breq	.+12     	; 0x11e <MUART_init+0x90>
 112:	21 30       	cpi	r18, 0x01	; 1
 114:	39 f4       	brne	.+14     	; 0x124 <MUART_init+0x96>
	{
		case USART_SYNC_MODE:
		 SET_BIT(UCSRC,UMSEL);
 116:	20 b5       	in	r18, 0x20	; 32
 118:	20 64       	ori	r18, 0x40	; 64
 11a:	20 bd       	out	0x20, r18	; 32
		 break;
 11c:	03 c0       	rjmp	.+6      	; 0x124 <MUART_init+0x96>
	
		case USART_ASYNC_MODE:
		CLEAR_BIT(UCSRC,UMSEL);
 11e:	20 b5       	in	r18, 0x20	; 32
 120:	2f 7b       	andi	r18, 0xBF	; 191
 122:	20 bd       	out	0x20, r18	; 32
		break;
	}
	
	 /*Set Parity mode*/
	 switch(config->PARITY_MODE)
 124:	9c 01       	movw	r18, r24
 126:	4a 2f       	mov	r20, r26
 128:	28 5f       	subi	r18, 0xF8	; 248
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	4f 4f       	sbci	r20, 0xFF	; 255
 12e:	f9 01       	movw	r30, r18
 130:	24 91       	lpm	r18, Z
 132:	47 fd       	sbrc	r20, 7
 134:	20 81       	ld	r18, Z
 136:	21 30       	cpi	r18, 0x01	; 1
 138:	91 f0       	breq	.+36     	; 0x15e <MUART_init+0xd0>
 13a:	18 f0       	brcs	.+6      	; 0x142 <MUART_init+0xb4>
 13c:	22 30       	cpi	r18, 0x02	; 2
 13e:	41 f0       	breq	.+16     	; 0x150 <MUART_init+0xc2>
 140:	14 c0       	rjmp	.+40     	; 0x16a <MUART_init+0xdc>
	 {
		 case USART_NO_PARITY:
		 CLEAR_BIT(UCSRC,UPM0);
 142:	20 b5       	in	r18, 0x20	; 32
 144:	2f 7e       	andi	r18, 0xEF	; 239
 146:	20 bd       	out	0x20, r18	; 32
		 CLEAR_BIT(UCSRC,UPM1);
 148:	20 b5       	in	r18, 0x20	; 32
 14a:	2f 7d       	andi	r18, 0xDF	; 223
 14c:	20 bd       	out	0x20, r18	; 32
		 break;
 14e:	0d c0       	rjmp	.+26     	; 0x16a <MUART_init+0xdc>
	 
		 case USART_EVEN_PARITY:
		 CLEAR_BIT(UCSRC,UPM0);
 150:	20 b5       	in	r18, 0x20	; 32
 152:	2f 7e       	andi	r18, 0xEF	; 239
 154:	20 bd       	out	0x20, r18	; 32
		 SET_BIT(UCSRC,UPM1);
 156:	20 b5       	in	r18, 0x20	; 32
 158:	20 62       	ori	r18, 0x20	; 32
 15a:	20 bd       	out	0x20, r18	; 32
		 break;
 15c:	06 c0       	rjmp	.+12     	; 0x16a <MUART_init+0xdc>
	 
		 case USART_ODD_PARITY:
		 SET_BIT(UCSRC,UPM0);
 15e:	20 b5       	in	r18, 0x20	; 32
 160:	20 61       	ori	r18, 0x10	; 16
 162:	20 bd       	out	0x20, r18	; 32
		 SET_BIT(UCSRC,UPM1);
 164:	20 b5       	in	r18, 0x20	; 32
 166:	20 62       	ori	r18, 0x20	; 32
 168:	20 bd       	out	0x20, r18	; 32
		 break;
	 }
	 /*Set number of stop bits*/
	  switch(config->STOP_BIT)
 16a:	9c 01       	movw	r18, r24
 16c:	4a 2f       	mov	r20, r26
 16e:	27 5f       	subi	r18, 0xF7	; 247
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	4f 4f       	sbci	r20, 0xFF	; 255
 174:	f9 01       	movw	r30, r18
 176:	24 91       	lpm	r18, Z
 178:	47 fd       	sbrc	r20, 7
 17a:	20 81       	ld	r18, Z
 17c:	22 23       	and	r18, r18
 17e:	19 f0       	breq	.+6      	; 0x186 <MUART_init+0xf8>
 180:	21 30       	cpi	r18, 0x01	; 1
 182:	29 f0       	breq	.+10     	; 0x18e <MUART_init+0x100>
 184:	07 c0       	rjmp	.+14     	; 0x194 <MUART_init+0x106>
	  {
		 case USART_ONE_STOP_BIT:
		 CLEAR_BIT(UCSRC,USBS);
 186:	20 b5       	in	r18, 0x20	; 32
 188:	27 7f       	andi	r18, 0xF7	; 247
 18a:	20 bd       	out	0x20, r18	; 32
		 break;
 18c:	03 c0       	rjmp	.+6      	; 0x194 <MUART_init+0x106>
	 
		 case USART_TWO_STOP_BITS:
		 SET_BIT(UCSRC,USBS);
 18e:	20 b5       	in	r18, 0x20	; 32
 190:	28 60       	ori	r18, 0x08	; 8
 192:	20 bd       	out	0x20, r18	; 32
		 break;
	  }
	 /*Set Data size*/
	 switch (config->DATA_SIZE)
 194:	0a 96       	adiw	r24, 0x0a	; 10
 196:	a1 1d       	adc	r26, r1
 198:	fc 01       	movw	r30, r24
 19a:	84 91       	lpm	r24, Z
 19c:	a7 fd       	sbrc	r26, 7
 19e:	80 81       	ld	r24, Z
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	f9 f0       	breq	.+62     	; 0x1e2 <MUART_init+0x154>
 1a4:	28 f4       	brcc	.+10     	; 0x1b0 <MUART_init+0x122>
 1a6:	88 23       	and	r24, r24
 1a8:	41 f0       	breq	.+16     	; 0x1ba <MUART_init+0x12c>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <MUART_init+0x140>
 1ae:	36 c0       	rjmp	.+108    	; 0x21c <MUART_init+0x18e>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	09 f1       	breq	.+66     	; 0x1f6 <MUART_init+0x168>
 1b4:	84 30       	cpi	r24, 0x04	; 4
 1b6:	49 f1       	breq	.+82     	; 0x20a <MUART_init+0x17c>
 1b8:	31 c0       	rjmp	.+98     	; 0x21c <MUART_init+0x18e>
	 {
		 case USART_DATA_SIZE_5:
		 CLEAR_BIT(UCSRC,UCSZ0);
 1ba:	80 b5       	in	r24, 0x20	; 32
 1bc:	8d 7f       	andi	r24, 0xFD	; 253
 1be:	80 bd       	out	0x20, r24	; 32
		 CLEAR_BIT(UCSRC,UCSZ1);
 1c0:	80 b5       	in	r24, 0x20	; 32
 1c2:	8b 7f       	andi	r24, 0xFB	; 251
 1c4:	80 bd       	out	0x20, r24	; 32
		 CLEAR_BIT(UCSRB,UCSZ2);
 1c6:	8a b1       	in	r24, 0x0a	; 10
 1c8:	8b 7f       	andi	r24, 0xFB	; 251
 1ca:	8a b9       	out	0x0a, r24	; 10
		 break;
 1cc:	27 c0       	rjmp	.+78     	; 0x21c <MUART_init+0x18e>
	 
		case USART_DATA_SIZE_6:
		 SET_BIT(UCSRC,UCSZ0);
 1ce:	80 b5       	in	r24, 0x20	; 32
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	80 bd       	out	0x20, r24	; 32
		 CLEAR_BIT(UCSRC,UCSZ1);
 1d4:	80 b5       	in	r24, 0x20	; 32
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	80 bd       	out	0x20, r24	; 32
		 CLEAR_BIT(UCSRB,UCSZ2);
 1da:	8a b1       	in	r24, 0x0a	; 10
 1dc:	8b 7f       	andi	r24, 0xFB	; 251
 1de:	8a b9       	out	0x0a, r24	; 10
		 break;
 1e0:	1d c0       	rjmp	.+58     	; 0x21c <MUART_init+0x18e>
	 
		 case USART_DATA_SIZE_7:
		 CLEAR_BIT(UCSRC,UCSZ0);
 1e2:	80 b5       	in	r24, 0x20	; 32
 1e4:	8d 7f       	andi	r24, 0xFD	; 253
 1e6:	80 bd       	out	0x20, r24	; 32
		 SET_BIT(UCSRC,UCSZ1);
 1e8:	80 b5       	in	r24, 0x20	; 32
 1ea:	84 60       	ori	r24, 0x04	; 4
 1ec:	80 bd       	out	0x20, r24	; 32
		 CLEAR_BIT(UCSRB,UCSZ2);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	8a b9       	out	0x0a, r24	; 10
		 break;
 1f4:	13 c0       	rjmp	.+38     	; 0x21c <MUART_init+0x18e>
	 
		case USART_DATA_SIZE_8:
		 SET_BIT(UCSRC,UCSZ0);
 1f6:	80 b5       	in	r24, 0x20	; 32
 1f8:	82 60       	ori	r24, 0x02	; 2
 1fa:	80 bd       	out	0x20, r24	; 32
		 SET_BIT(UCSRC,UCSZ1);
 1fc:	80 b5       	in	r24, 0x20	; 32
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	80 bd       	out	0x20, r24	; 32
		 CLEAR_BIT(UCSRB,UCSZ2);
 202:	8a b1       	in	r24, 0x0a	; 10
 204:	8b 7f       	andi	r24, 0xFB	; 251
 206:	8a b9       	out	0x0a, r24	; 10
		 break;
 208:	09 c0       	rjmp	.+18     	; 0x21c <MUART_init+0x18e>
	 
		 case USART_DATA_SIZE_9:
		 SET_BIT(UCSRC,UCSZ0);
 20a:	80 b5       	in	r24, 0x20	; 32
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	80 bd       	out	0x20, r24	; 32
		 SET_BIT(UCSRC,UCSZ1);
 210:	80 b5       	in	r24, 0x20	; 32
 212:	84 60       	ori	r24, 0x04	; 4
 214:	80 bd       	out	0x20, r24	; 32
		 SET_BIT(UCSRB,UCSZ2);
 216:	8a b1       	in	r24, 0x0a	; 10
 218:	84 60       	ori	r24, 0x04	; 4
 21a:	8a b9       	out	0x0a, r24	; 10
		 break;
	 }
	
	/*Enable UART  receiver*/
	SET_BIT(UCSRB,RXEN);
 21c:	8a b1       	in	r24, 0x0a	; 10
 21e:	80 61       	ori	r24, 0x10	; 16
 220:	8a b9       	out	0x0a, r24	; 10
	
	/*Enable UART  transmitter*/
	SET_BIT(UCSRB,TXEN);
 222:	8a b1       	in	r24, 0x0a	; 10
 224:	88 60       	ori	r24, 0x08	; 8
 226:	8a b9       	out	0x0a, r24	; 10
	
	/*Set URSEL to write on UCSRC*/
	SET_BIT(UCSRC,URSEL);    //
 228:	80 b5       	in	r24, 0x20	; 32
 22a:	80 68       	ori	r24, 0x80	; 128
 22c:	80 bd       	out	0x20, r24	; 32

}
 22e:	ef 90       	pop	r14
 230:	df 90       	pop	r13
 232:	cf 90       	pop	r12
 234:	08 95       	ret

Disassembly of section .text.MUART_sendByte:

00000736 <MUART_sendByte>:

void MUART_sendByte(u8 u8_a_data)
{
	//wait for empty transmit buffer
	while (!GET_BIT(UCSRA,UDRE));
 736:	5d 9b       	sbis	0x0b, 5	; 11
 738:	fe cf       	rjmp	.-4      	; 0x736 <MUART_sendByte>
	UDR = u8_a_data;    
 73a:	8c b9       	out	0x0c, r24	; 12
 73c:	08 95       	ret

Disassembly of section .text.MUART_receiveByte:

0000073e <MUART_receiveByte>:
}

u8 MUART_receiveByte(void)
{
	//wait until receive flag is1 ,receive complete
		while (!GET_BIT(UCSRA,RXC));
 73e:	5f 9b       	sbis	0x0b, 7	; 11
 740:	fe cf       	rjmp	.-4      	; 0x73e <MUART_receiveByte>
		return  UDR;
 742:	8c b1       	in	r24, 0x0c	; 12

}
 744:	08 95       	ret

Disassembly of section .text.libgcc:

000006fe <__movmemx_qi>:
 6fe:	99 27       	eor	r25, r25

00000700 <__movmemx_hi>:
 700:	77 fd       	sbrc	r23, 7
 702:	05 c0       	rjmp	.+10     	; 0x70e <__movmemx_hi+0xe>
 704:	05 90       	lpm	r0, Z+
 706:	0d 92       	st	X+, r0
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	e1 f7       	brne	.-8      	; 0x704 <__movmemx_hi+0x4>
 70c:	08 95       	ret
 70e:	01 90       	ld	r0, Z+
 710:	0d 92       	st	X+, r0
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	e1 f7       	brne	.-8      	; 0x70e <__movmemx_hi+0xe>
 716:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000074e <_fini>:
 74e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000750 <__funcs_on_exit>:
 750:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000752 <__simulator_exit>:
 752:	08 95       	ret

Disassembly of section .text.exit:

00000718 <exit>:
 718:	ec 01       	movw	r28, r24
 71a:	0e 94 a8 03 	call	0x750	; 0x750 <__funcs_on_exit>
 71e:	0e 94 a7 03 	call	0x74e	; 0x74e <_fini>
 722:	ce 01       	movw	r24, r28
 724:	0e 94 a9 03 	call	0x752	; 0x752 <__simulator_exit>
 728:	ce 01       	movw	r24, r28
 72a:	0e 94 a5 03 	call	0x74a	; 0x74a <_Exit>

Disassembly of section .text._Exit:

0000074a <_Exit>:
 74a:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
